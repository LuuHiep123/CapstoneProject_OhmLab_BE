using AutoMapper;
using BusinessLayer.RequestModel.Subject;
using BusinessLayer.ResponseModel.Subject;
using DataLayer.Entities;
using DataLayer.Repository;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using BusinessLayer.ResponseModel.Semester;
using DataLayer.DBContext;

namespace BusinessLayer.Service.Implement
{
    public class SubjectService : ISubjectService
    {
        private readonly ISubjectRepository _subjectRepository;
        private readonly IClassRepository _classRepository;
        private readonly ISemesterRepository _semesterRepository;
        private readonly ISemesterSubjectRepository _semesterSubjectRepository;
        private readonly IMapper _mapper;
        private readonly db_abadcb_ohmlabContext _DBContext;

        public SubjectService(ISubjectRepository subjectRepository, 
                            IClassRepository classRepository, 
                            ISemesterRepository semesterRepository,
                            ISemesterSubjectRepository semesterSubjectRepository,
                                                         IMapper mapper,
                             db_abadcb_ohmlabContext DBContext)
        {
            _subjectRepository = subjectRepository;
            _classRepository = classRepository;
            _semesterRepository = semesterRepository;
            _semesterSubjectRepository = semesterSubjectRepository;
            _mapper = mapper;
            _DBContext = DBContext;
        }

        public async Task AddSubject(CreateSubjectRequestModel subjectModel)
        {
            try
            {
                // Validation
                if (string.IsNullOrWhiteSpace(subjectModel.SubjectName))
                {
                    throw new ArgumentException("T√™n m√¥n h·ªçc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                }

                if (string.IsNullOrWhiteSpace(subjectModel.SubjectCode))
                {
                    throw new ArgumentException("M√£ m√¥n h·ªçc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                }

                if (subjectModel.SemesterId <= 0)
                {
                    throw new ArgumentException("Semester ID ph·∫£i l·ªõn h∆°n 0!");
                }

                // Ki·ªÉm tra semester t·ªìn t·∫°i
                var semester = await _semesterRepository.GetByIdAsync(subjectModel.SemesterId);
                if (semester == null)
                {
                    throw new ArgumentException($"Kh√¥ng t√¨m th·∫•y semester v·ªõi ID: {subjectModel.SemesterId}");
                }

                // T·∫°o subject
                var subject = _mapper.Map<Subject>(subjectModel);
                subject.SubjectStatus = "Active"; // Default status
                await _subjectRepository.AddSubject(subject);

                // T·∫°o SemesterSubject relationship
                var semesterSubject = new SemesterSubject
                {
                    SubjectId = subject.SubjectId,
                    SemesterId = subjectModel.SemesterId,
                    SemesterSubject1 = "valid"
                };
                await _semesterSubjectRepository.AddAsync(semesterSubject);
            }
            catch (Exception ex)
            {
                throw new Exception($"L·ªói khi t·∫°o m√¥n h·ªçc: {ex.Message}");
            }
        }

        public async Task DeleteSubject(int id)
        {
            var subject = await _subjectRepository.GetSubjectById(id);
            if (subject != null)
            {
                // Ki·ªÉm tra Subject c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi Class n√†o kh√¥ng
                var classes = await _classRepository.GetAllAsync();
                var usingClasses = classes.Where(c => c.SubjectId == id).ToList();
                
                if (usingClasses.Any())
                {
                    // N·∫øu c√≥ Class ƒëang s·ª≠ d·ª•ng, kh√¥ng cho ph√©p x√≥a
                    throw new System.InvalidOperationException($"Kh√¥ng th·ªÉ x√≥a m√¥n h·ªçc n√†y v√¨ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi {usingClasses.Count} l·ªõp h·ªçc!");
                }

                subject.SubjectStatus = "Inactive";
                await _subjectRepository.UpdateSubject(subject);
            }
        }

        public async Task<SubjectResponseModel> GetSubjectById(int id)
        {
            var subject = await _subjectRepository.GetSubjectById(id);
            if (subject == null)
                return null;

            // L·∫•y th√¥ng tin semester
            var semesterSubject = await _semesterSubjectRepository.GetBySubjectIdAsync(id);
            var semester = semesterSubject != null ? await _semesterRepository.GetByIdAsync(semesterSubject.SemesterId) : null;

            return new SubjectResponseModel
            {
                SubjectId = subject.SubjectId,
                SubjectName = subject.SubjectName,
                SubjectCode = subject.SubjectCode,
                SubjectDescription = subject.SubjectDescription,
                SubjectStatus = subject.SubjectStatus,
                SemesterId = semester?.SemesterId,
                SemesterName = semester?.SemesterName
            };
        }

        public async Task<BusinessLayer.ResponseModel.BaseResponse.DynamicResponse<SubjectResponseModel>> GetAllSubjects()
        {
            var subjects = await _subjectRepository.GetAllSubjects();
            var subjectResponses = new List<SubjectResponseModel>();

            foreach (var subject in subjects)
            {
                // L·∫•y th√¥ng tin semester cho m·ªói subject
                var semesterSubject = await _semesterSubjectRepository.GetBySubjectIdAsync(subject.SubjectId);
                var semester = semesterSubject != null ? await _semesterRepository.GetByIdAsync(semesterSubject.SemesterId) : null;

                subjectResponses.Add(new SubjectResponseModel
                {
                    SubjectId = subject.SubjectId,
                    SubjectName = subject.SubjectName,
                    SubjectCode = subject.SubjectCode,
                    SubjectDescription = subject.SubjectDescription,
                    SubjectStatus = subject.SubjectStatus,
                    SemesterId = semester?.SemesterId,
                    SemesterName = semester?.SemesterName
                });
            }

            return new BusinessLayer.ResponseModel.BaseResponse.DynamicResponse<SubjectResponseModel>
            {
                Code = 200,
                Success = true,
                Message = "L·∫•y danh s√°ch m√¥n h·ªçc th√†nh c√¥ng!",
                Data = new BusinessLayer.ResponseModel.BaseResponse.MegaData<SubjectResponseModel>
                {
                    PageData = subjectResponses,
                    PageInfo = new BusinessLayer.ResponseModel.BaseResponse.PagingMetaData
                    {
                        Page = 1,
                        Size = subjectResponses.Count,
                        TotalItem = subjectResponses.Count,
                        TotalPage = 1
                    },
                    SearchInfo = null
                }
            };
        }

        public async Task UpdateSubject(int id, UpdateSubjectRequestModel subjectModel)
        {
            var subject = await _subjectRepository.GetSubjectById(id);
            if (subject != null)
            {
                _mapper.Map(subjectModel, subject);
                subject.SubjectId = id;
                await _subjectRepository.UpdateSubject(subject);
            }
        }

        // ‚úÖ TH√äM M·ªöI: Method debug ƒë·ªÉ ki·ªÉm tra t·∫°i sao semester b·ªã null
        public async Task<string> DebugSubjectSemester(int subjectId)
        {
            try
            {
                var debugInfo = new List<string>();
                
                // 1. Ki·ªÉm tra Subject c√≥ t·ªìn t·∫°i kh√¥ng
                var subject = await _subjectRepository.GetSubjectById(subjectId);
                if (subject == null)
                {
                    return $"‚ùå Subject v·ªõi ID {subjectId} kh√¥ng t·ªìn t·∫°i!";
                }
                debugInfo.Add($"‚úÖ Subject t·ªìn t·∫°i: {subject.SubjectName} ({subject.SubjectCode})");

                // 2. Ki·ªÉm tra t·∫•t c·∫£ record trong SemesterSubject
                var allSemesterSubjects = await _DBContext.SemesterSubjects
                    .Where(ss => ss.SubjectId == subjectId)
                    .ToListAsync();
                
                if (!allSemesterSubjects.Any())
                {
                    debugInfo.Add($"‚ùå Kh√¥ng c√≥ record n√†o trong SemesterSubject v·ªõi SubjectId = {subjectId}");
                    debugInfo.Add("üí° C·∫ßn t·∫°o record SemesterSubject cho subject n√†y!");
                }
                else
                {
                    debugInfo.Add($"üìä T√¨m th·∫•y {allSemesterSubjects.Count} record trong SemesterSubject:");
                    foreach (var ss in allSemesterSubjects)
                    {
                        debugInfo.Add($"   - ID: {ss.SemesterSubjectId}, SemesterId: {ss.SemesterId}, Status: '{ss.SemesterSubject1}'");
                    }
                }

                // 3. Ki·ªÉm tra record "valid"
                var validSemesterSubject = await _semesterSubjectRepository.GetBySubjectIdAsync(subjectId);
                if (validSemesterSubject == null)
                {
                    debugInfo.Add($"‚ùå Kh√¥ng c√≥ record n√†o v·ªõi SemesterSubject1 = 'valid'");
                    debugInfo.Add("üí° C·∫ßn c·∫≠p nh·∫≠t status ho·∫∑c t·∫°o record m·ªõi!");
                }
                else
                {
                    debugInfo.Add($"‚úÖ T√¨m th·∫•y record valid: SemesterId = {validSemesterSubject.SemesterId}");
                    
                    // 4. Ki·ªÉm tra Semester c√≥ t·ªìn t·∫°i kh√¥ng
                    var semester = await _semesterRepository.GetByIdAsync(validSemesterSubject.SemesterId);
                    if (semester == null)
                    {
                        debugInfo.Add($"‚ùå Semester v·ªõi ID {validSemesterSubject.SemesterId} kh√¥ng t·ªìn t·∫°i!");
                    }
                    else
                    {
                        debugInfo.Add($"‚úÖ Semester t·ªìn t·∫°i: {semester.SemesterName}");
                    }
                }

                return string.Join("\n", debugInfo);
            }
            catch (Exception ex)
            {
                return $"‚ùå L·ªói khi debug: {ex.Message}";
            }
        }

        // ‚úÖ TH√äM M·ªöI: Method ƒë·ªÉ fix v·∫•n ƒë·ªÅ semester null
        public async Task<bool> FixSubjectSemester(int subjectId, int semesterId)
        {
            try
            {
                // 1. Ki·ªÉm tra Subject v√† Semester c√≥ t·ªìn t·∫°i kh√¥ng
                var subject = await _subjectRepository.GetSubjectById(subjectId);
                if (subject == null)
                {
                    throw new ArgumentException($"Subject v·ªõi ID {subjectId} kh√¥ng t·ªìn t·∫°i!");
                }

                var semester = await _semesterRepository.GetByIdAsync(semesterId);
                if (semester == null)
                {
                    throw new ArgumentException($"Semester v·ªõi ID {semesterId} kh√¥ng t·ªìn t·∫°i!");
                }

                // 2. Ki·ªÉm tra xem ƒë√£ c√≥ record SemesterSubject ch∆∞a
                var existingRecord = await _DBContext.SemesterSubjects
                    .FirstOrDefaultAsync(ss => ss.SubjectId == subjectId);

                if (existingRecord != null)
                {
                    // C·∫≠p nh·∫≠t record hi·ªán t·∫°i
                    existingRecord.SemesterId = semesterId;
                    existingRecord.SemesterSubject1 = "valid";
                    _DBContext.SemesterSubjects.Update(existingRecord);
                }
                else
                {
                    // T·∫°o record m·ªõi
                    var newSemesterSubject = new SemesterSubject
                    {
                        SubjectId = subjectId,
                        SemesterId = semesterId,
                        SemesterSubject1 = "valid"
                    };
                    _DBContext.SemesterSubjects.Add(newSemesterSubject);
                }

                await _DBContext.SaveChangesAsync();
                return true;
            }
            catch (Exception ex)
            {
                throw new Exception($"L·ªói khi fix semester cho subject: {ex.Message}");
            }
        }

        // ‚úÖ TH√äM M·ªöI: Method ƒë·ªÉ l·∫•y t·∫•t c·∫£ semester c√≥ s·∫µn
        public async Task<List<SemesterResponseModel>> GetAllAvailableSemesters()
        {
            try
            {
                var semesters = await _semesterRepository.GetAllAsync();
                return semesters.Select(s => new SemesterResponseModel
                {
                    SemesterId = s.SemesterId,
                    SemesterName = s.SemesterName,
                    SemesterStartDate = s.SemesterStartDate,
                    SemesterEndDate = s.SemesterEndDate,
                    SemesterDescription = s.SemesterDescription,
                    SemesterStatus = s.SemesterStatus
                }).ToList();
            }
            catch (Exception ex)
            {
                throw new Exception($"L·ªói khi l·∫•y danh s√°ch semester: {ex.Message}");
            }
        }
    }
} 